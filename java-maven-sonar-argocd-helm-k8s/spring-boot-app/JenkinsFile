pipeline {
    agent any

    tools {
        maven 'Maven'  // Name from Jenkins Global Tool Configuration
        jdk 'Java 17' // Adjust based on your setup
    }

    environment {
        SONARQUBE_TOKEN = credentials('sonarqube-token') // Jenkins credentials ID for SonarQube token
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/prakashpotnuru11/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('My SonarQube Server') { // Name from Jenkins SonarQube configuration
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=spring-boot-app \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONARQUBE_TOKEN}
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                sh 'docker build -t prakashpotnuru11/spring-boot-app:latest .'
                sh 'docker push prakashpotnuru11/spring-boot-app:latest'
            }
        }

        stage('Deploy to Kubernetes with ArgoCD') {
            steps {
                sh 'argocd app sync spring-boot-app'
            }
        }
    }
}


pipeline {
    agent any

    environment {
        // SonarQube
        SONAR_HOST_URL = 'http://43.205.228.54:9000'
        SONAR_PROJECT_KEY = 'spring-boot-app'

        // Docker
        DOCKER_IMAGE = 'prakashpotnuru11/spring-boot-app:latest'

        // ArgoCD
        ARGOCD_SERVER = 'https://9585d3102e27.ngrok-free.app'  // your ngrok URL
        ARGOCD_APP_NAME = 'spring-boot-app'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                git branch: 'main', url: 'https://github.com/prakashpotnuru11/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube analysis...'
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        sh """
                            mvn clean verify sonar:sonar \
                            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONAR_TOKEN
                        """
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                echo 'Building Docker image and pushing to DockerHub...'
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', 
                                                      usernameVariable: 'DOCKER_USER', 
                                                      passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            docker login -u $DOCKER_USER -p $DOCKER_PASS
                            docker build -t $DOCKER_IMAGE .
                            docker push $DOCKER_IMAGE
                        """
                    }
                }
            }
        }

        stage('Deploy via ArgoCD') {
            steps {
                echo 'Deploying application via ArgoCD...'
                withCredentials([usernamePassword(credentialsId: 'argocd-cred', 
                                                  usernameVariable: 'ARGOCD_USER', 
                                                  passwordVariable: 'ARGOCD_PASS')]) {
                    sh '''
                        argocd login $ARGOCD_SERVER --username $ARGOCD_USER --password $ARGOCD_PASS --insecure
                        argocd app sync $ARGOCD_APP_NAME
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed! Check logs.'
        }
    }
}
